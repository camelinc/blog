<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hashcat on camelinc</title>
    <link>http://camelinc.info/tags/hashcat/</link>
    <description>Recent content in Hashcat on camelinc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Feb 2016 20:59:59 +0000</lastBuildDate>
    <atom:link href="http://camelinc.info/tags/hashcat/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Password Cracking on Amazon EC2 </title>
      <link>http://camelinc.info/blog/2016/02/Password-Cracking-on-Amazon-EC2/</link>
      <pubDate>Tue, 09 Feb 2016 20:59:59 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2016/02/Password-Cracking-on-Amazon-EC2/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Cracking with the desktop computer is not always a good idea.
It can be quite noisy when you are trying to sleep.
The room can become too hot for a hacker.
And most important of all, all the hashes are already in the cloud!
Let&amp;rsquo;s get started.&lt;/p&gt;

&lt;h1 id=&#34;create-ec2-gpu-instance&#34;&gt;Create EC2 GPU Instance&lt;/h1&gt;

&lt;p&gt;Take a look the the current GPU instance details at &lt;a href=&#34;https://aws.amazon.com/ec2/instance-types/#gpu&#34;&gt;amazon&lt;/a&gt; and choose the right version for your purse.
Spin up the instance and login via ssh before proceeding.
For starters I chose the x2.2xlarge instance type.
The AMI image ID was ami-87564feb or simply choose a Ubuntu trusty amd64 image.&lt;/p&gt;

&lt;h1 id=&#34;setup-ec2-gpu-instance&#34;&gt;Setup EC2 GPU Instance&lt;/h1&gt;

&lt;p&gt;Before we begin, let&amp;rsquo;s verify that the system has got a NVIDIA graphics card.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;lspci &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -i &lt;span class=&#34;s2&#34;&gt;&amp;quot;NVIDIA&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks good!
In order to stick to the best practice, let&amp;rsquo;s follow the &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-linux/index.html#runfile-installation&#34;&gt;guide&lt;/a&gt;.
Start by installing the required packages, such as gcc and header files.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo apt-get install -y gcc g++ build-essential &lt;span class=&#34;s2&#34;&gt;&amp;quot;linux-headers-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;uname -r&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo apt-get install -y freeglut3 freeglut3-dev p7zip-full
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo apt-get install -y linux-image-extra-virtual
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we simply choose the install method and download the respective driver from &lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;NVIDIA&lt;/a&gt;.
For this time let&amp;rsquo;s stick to the installer file.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -O &lt;span class=&#34;s2&#34;&gt;&amp;quot;http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda_7.5.18_linux.run&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, the nouveau driver has to be removed.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;lacklist nouveau&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;blacklist lbm-nouveau&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;options nouveau modeset=0&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;alias nouveau off&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;alias lbm-nouveau off&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo &lt;/span&gt;options nouveau &lt;span class=&#34;nv&#34;&gt;modeset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee -a /etc/modprobe.d/nouveau-kms.conf
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo update-initramfs -u
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this we have to restart the system for the changes to take effect.&lt;/p&gt;

&lt;h1 id=&#34;installing-cuda&#34;&gt;Installing Cuda&lt;/h1&gt;

&lt;p&gt;After the reboot the next step is to unpack the runfile.
The output will consist of three separate files.
The first one to execute is the NVIDIA-Linux-x86_64&amp;hellip;run file.
This will install the kernel module.
After that the module can be loaded.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo &lt;span class=&#34;s2&#34;&gt;&amp;quot;./cuda_7.5.18_linux.run&amp;quot;&lt;/span&gt; -extract&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./nvidia_installers
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo ./nvidia_installers/NVIDIA-Linux-x86_64-352.39.run --silent
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo modprobe nvidia
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the kernel module has been installed the system environment has to be adjusted.
First the PATH should be adjusted.
Also the LD_LIBRARY_PATH has to include the cuda libraries.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/local/cuda/bin:&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee -a /etc/environment
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;/usr/local/cuda/lib64&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee -a /etc/ld.so.conf.d/cuda.conf
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;/usr/local/cuda/lib&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee -a /etc/ld.so.conf.d/cuda.conf
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once again, let&amp;rsquo;s reboot the system so the changes take effect.&lt;/p&gt;

&lt;h1 id=&#34;installing-cudahashcat&#34;&gt;Installing cudaHashcat&lt;/h1&gt;

&lt;p&gt;After the final reboot quickly verify the kernel module is loaded.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;lsmod &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -q nvidia
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If everything works, let&amp;rsquo;s proceed by downloading the cudaHashcat binary.
Once it is downloaded we can unzip it and setup the access rights.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo curl https://hashcat.net/files/cudaHashcat-2.01.7z -O
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo 7za x -y -o /opt/ cudaHashcat-2.01.7z &amp;gt; /dev/null
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo chown -R ubuntu:ubuntu /opt/cudaHashcat-2.01/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the next thing is to check that cudaHashcat is working as expected.&lt;/p&gt;

&lt;h2 id=&#34;benchmark&#34;&gt;Benchmark&lt;/h2&gt;

&lt;p&gt;What better way to see the result, other than run a benchmark.
This will give a true indicator of the gains over a traditional desktop GPU.
The whole results are available on &lt;a href=&#34;https://gist.github.com/camelinc/5c454d428e25a1cdc803#file-cudahashcat64-bin_benchmark_g2-2xlarge&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;/opt/cudaHashcat-2.01/cudaHashcat64.bin --benchmark
cudaHashcat v2.01 starting in benchmark-mode...
Device &lt;span class=&#34;c&#34;&gt;#1: GRID K520, 4095MB, 797Mhz, 8MCU&lt;/span&gt;

Hashtype: MD5
Workload: &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt; loops, &lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; accel
Speed.GPU.#1.:  2632.2 MH/s

Hashtype: SHA1
Workload: &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt; loops, &lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; accel
Speed.GPU.#1.:   690.4 MH/s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My local machine with a AMD Radeon HD 7870 GHz Edition for a comparison.
The graphics card encounters some problems with the temperature and aborts some tests.
The full results are available on &lt;a href=&#34;https://gist.github.com/camelinc/5c454d428e25a1cdc803#file-oclhashcat64-bin_benchmark&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo /opt/oclHashcat/oclHashcat64.bin --benchmark
oclHashcat v2.01 starting in benchmark-mode...
Device &lt;span class=&#34;c&#34;&gt;#1: Pitcairn, 1630MB, 1050Mhz, 20MCU&lt;/span&gt;

Hashtype: MD5
Workload: &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt; loops, &lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; accel
Speed.GPU.#1.:  4477.7 MH/s

Hashtype: SHA1
Workload: &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt; loops, &lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; accel
Speed.GPU.#1.:  1710.5 MH/s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The results are quite obvious.
My old AMD is still better at cracking than a g2.2xlarge instance.
Maybe scaling up to a g2.8xlarge give more promising results.&lt;/p&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;The speed is not really magnificent.
Maybe running Hashcat in a spot instance for a cheap price is the right way to go.
The problem here is that the instance might terminate because of price fluctuations.
To solve this probelm S3 cloud storage would be a great place to store the hashes and results.
During testing the connection to S3 via awscli did not work out.
Maybe another tool can do the job.
Or another storage mechanism is suitable to persist the relevant data.&lt;/p&gt;

&lt;h1 id=&#34;automation&#34;&gt;Automation&lt;/h1&gt;

&lt;p&gt;In order to speed up the whole process a bash script is the obvious solution.
The whole file can be found in &lt;a href=&#34;https://gist.github.com/camelinc/5c454d428e25a1cdc803#file-cuda-setup-sh&#34;&gt;this&lt;/a&gt; gist.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;#basic setup, disable nouveau&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;./cuda-setup.sh -i
&lt;span class=&#34;c&#34;&gt;#install cuda&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;./cuda-setup.sh -r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;h2 id=&#34;cuda&#34;&gt;CUDA&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA 7.5 Downloads | NVIDIA Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-linux/index.html&#34;&gt;Getting Started Linux :: CUDA Toolkit Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tleyden.github.io/blog/2014/10/25/cuda-6-dot-5-on-aws-gpu-instance-running-ubuntu-14-dot-04/&#34;&gt;CUDA 6.5 on AWS GPU Instance Running Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vtluug.org/wiki/Amazon_EC2:_GPU_Cluster&#34;&gt;Amazon EC2: GPU Cluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hashcat&#34;&gt;Hashcat&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dunham.io/post/password-cracking/&#34;&gt;Password Cracking on Amazon EC2 · Andrew Dunham&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thehackerblog.com/amazon-ec2-gpu-hvm-spot-instance-cracking-setup-tutorial/&#34;&gt;Amazon EC2 GPU HVM Spot Instance Password Cracking – Hashcat Setup Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hashcat.net/forum/thread-4143.html&#34;&gt;cudaHashCat64 on AWS EC2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.parseerror.com/blog/aws-gpu-password-cracking-recipe&#34;&gt;AWS GPU Password Cracking Recipe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- ## Amazon EC2 ##
 * [User Guides — Boto 3 Docs 1.2.3 documentation](https://boto3.readthedocs.org/en/latest/guide/index.html)
//--&gt;
</description>
    </item>
    
  </channel>
</rss>