<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on camelinc</title>
    <link>http://camelinc.info/post/</link>
    <description>Recent content in Posts on camelinc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2014 - 2017; all rights reserved.</copyright>
    <lastBuildDate>Wed, 08 Mar 2017 22:22:59 +0000</lastBuildDate>
    
	<atom:link href="http://camelinc.info/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vulnhub - Breach 2.1 boot2root CTF walkthrough</title>
      <link>http://camelinc.info/blog/2017/03/Vulnhub---Breach-2.1-boot2root-CTF-walkthrough/</link>
      <pubDate>Wed, 08 Mar 2017 22:22:59 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2017/03/Vulnhub---Breach-2.1-boot2root-CTF-walkthrough/</guid>
      <description>Introduction Breach 2.1 is meant to be beginner to intermediate boot2root/CTF challenge. The VM is configured with a static IP address (192.168.110.151) so you will need to configure your host-only adaptor to this subnet.
Information Gathering The VM is configured to the IP address 192.168.110.151. Let&amp;rsquo;s start by scanning the target via nmap.
$ nmap -n -Pn -sS -p- -sV -iL scope -v --open --script &amp;#34;http-title or default&amp;#34; -oA target_$(date &amp;#34;+%Y-%m-%d&amp;#34;) # Nmap 7.</description>
    </item>
    
    <item>
      <title>Vulnhub - Breach 1 boot2root CTF walkthrough</title>
      <link>http://camelinc.info/blog/2017/03/Vulnhub---Breach-1-boot2root-CTF-walkthrough/</link>
      <pubDate>Thu, 02 Mar 2017 10:46:59 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2017/03/Vulnhub---Breach-1-boot2root-CTF-walkthrough/</guid>
      <description>Introduction Breach 1.0 is meant to be beginner to intermediate boot2root/CTF challenge. The VM is configured with a static IP address (192.168.110.140) so you will need to configure your host-only adaptor to this subnet.
Information Gathering The VM is configured to the IP address 192.168.110.140. Let&amp;rsquo;s start by scanning the target via nmap.
$ nmap -Pn -n -sS 192.168.110.140 --top-ports 100 -v --open -oA target_$(date &amp;#34;+%Y-%m-%d&amp;#34;) # Nmap 7.40 scan initiated Wed Mar 1 13:34:26 2017 as: nmap -Pn -n -sS -v --open -oA target_2017-03-01 192.</description>
    </item>
    
    <item>
      <title>Vulnhub - Mr Robot: 1 boot2root CTF walkthrough</title>
      <link>http://camelinc.info/blog/2017/02/Vulnhub---Mr-Robot-1-boot2root-CTF-walkthrough/</link>
      <pubDate>Sat, 25 Feb 2017 10:46:59 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2017/02/Vulnhub---Mr-Robot-1-boot2root-CTF-walkthrough/</guid>
      <description>Introduction Find the three flags that are hidden in the vm.
Flag 1 To begin the fun let&amp;rsquo;s run netdiscover to identify the target system.
  There it is, waiting at 10.0.2.7. The next step obviously is to run a quick nmap scan.
nmap -sS -p- 10.0.2.7 -v --open -oA target_$(date &amp;#34;+%Y-%m-%d&amp;#34;) -sC -sV   Run a file brute-force on the webserver.
gobuster -u http://10.0.2.7 -w /usr/share/seclists/Discovery/Web_Content/raft-medium-files.txt -e -r -l   While gobuster is running and the results are coming in, let&amp;rsquo;s just take a look at the website and the robots.</description>
    </item>
    
    <item>
      <title>Social Engineering with PowerShell Empire and gophish</title>
      <link>http://camelinc.info/blog/2016/09/Social-Engineering-with-PowerShell-Empire-and-gophish/</link>
      <pubDate>Thu, 01 Sep 2016 10:46:59 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2016/09/Social-Engineering-with-PowerShell-Empire-and-gophish/</guid>
      <description>Introduction Word macros are one of the top sources of malware infection. Creating such a malicious macro can be done in less than 10 minutes. This article will give an insight how to perform such an attack with open-source resources. The best is, that it just takes a few minutes.
Preparation Get a running Kali Linux. PowerShell Empire will already be installed. This will be our command and control tool.</description>
    </item>
    
    <item>
      <title>SEC660/GXPN Review</title>
      <link>http://camelinc.info/blog/2016/08/SEC660/GXPN-Review/</link>
      <pubDate>Thu, 18 Aug 2016 20:59:59 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2016/08/SEC660/GXPN-Review/</guid>
      <description>Introduction May 2016 I had the chance to participate in the SANS SEC660: Advanced Penetration Testing, Exploit Writing, and Ethical Hacking in Amsterdam. The course syllabus gave a good outline about what to expect. For some topics I felt they would be really worth it. According to the prerequisites only basic scripting, networking and operating system knowledge were necessary. One big drawback is the price for a SANS training. It is by no means comparable to the offensive security trainings.</description>
    </item>
    
    <item>
      <title>Discovering juicy targets via DNS</title>
      <link>http://camelinc.info/blog/2016/07/Discovering-juicy-targets-via-DNS/</link>
      <pubDate>Fri, 29 Jul 2016 20:59:59 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2016/07/Discovering-juicy-targets-via-DNS/</guid>
      <description>Introduction Information gathering is the first step in a penetration test. Identifying potential targets is crucial. Apart from simple IP addresses, that can be associated to the target, domain names often provide more information. These hostnames can provide an idea about the purpose of the system. Also, they might help mapping domain structure of the target. They also might indicate different web applications on a particular host.
Related Work There are a lot of awesome tools out there already.</description>
    </item>
    
    <item>
      <title>Password Cracking on Amazon EC2 </title>
      <link>http://camelinc.info/blog/2016/02/Password-Cracking-on-Amazon-EC2/</link>
      <pubDate>Tue, 09 Feb 2016 20:59:59 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2016/02/Password-Cracking-on-Amazon-EC2/</guid>
      <description>Introduction Cracking with the desktop computer is not always a good idea. It can be quite noisy when you are trying to sleep. The room can become too hot for a hacker. And most important of all, all the hashes are already in the cloud! Let&amp;rsquo;s get started.
Create EC2 GPU Instance Take a look the the current GPU instance details at amazon and choose the right version for your purse.</description>
    </item>
    
    <item>
      <title>The 2015 SANS Holiday Hack Challenge - Solution</title>
      <link>http://camelinc.info/blog/2016/01/The-2015-SANS-Holiday-Hack-Challenge---Solution/</link>
      <pubDate>Tue, 05 Jan 2016 01:23:27 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2016/01/The-2015-SANS-Holiday-Hack-Challenge---Solution/</guid>
      <description>Summary  Which commands are sent across the Gnomeâ€™s command-and-control channel?  EXEC:iwconfig in packet 363 EXEC:cat /tmp/iwlistscan.txt in packet 573  What image appears in the photo the Gnome sent across the channel from the Dosis home?  A tidy children&amp;rsquo;s room is depicted in the photo. The photo includes something like legs that are probably attached to the camera. At the bottom is a label with &amp;ldquo;GnomeNet-NorthAmerica&amp;rdquo;.  What operating system and CPU type are used in the Gnome?</description>
    </item>
    
    <item>
      <title>FLARE on Challenge 2015</title>
      <link>http://camelinc.info/blog/2015/08/FLARE-on-Challenge-2015/</link>
      <pubDate>Mon, 31 Aug 2015 16:55:26 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2015/08/FLARE-on-Challenge-2015/</guid>
      <description>Instructions The FireEye Labs Advanced Reverse Engineering (FLARE) team is an elite technical group of malware analysts, researchers, and hackers. We are looking to hire smart individuals interested in reverse engineering. We have created this series of binary challenges to test your skills. We encourage anyone to participate and practice their skills while having fun!
Challenge 0x01 Walkthrough Somewhere in the file an email address is hidden. First, let&amp;rsquo;s extract the exe with 7zip.</description>
    </item>
    
    <item>
      <title>Offensive Security Certified Expert</title>
      <link>http://camelinc.info/blog/2015/07/Offensive-Security-Certified-Expert/</link>
      <pubDate>Mon, 06 Jul 2015 16:00:02 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2015/07/Offensive-Security-Certified-Expert/</guid>
      <description>Intro Try Harder! Today I finally received my OSCE certificate in the mail. So, I thought I could share my past experience in a few sentences.
Exercises Most of the exercises cover exploit development. Web security and network attacks complete the picture. One of my favourite topics was AV evasion.
Everything is documented quite well and easy to follow. Even though the course material is covered with dust, it provides a good introduction.</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Protostar - Final levels</title>
      <link>http://camelinc.info/blog/2014/11/Exploit-Exercises---Protostar---Final-levels/</link>
      <pubDate>Sun, 02 Nov 2014 16:55:26 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2014/11/Exploit-Exercises---Protostar---Final-levels/</guid>
      <description>Prequisites  Protostar ISO  Final 0 For this level we have got a binary listening on port 2995.
Exploitation Let&amp;rsquo;s find out what this binary is up to.
0x08049833 &amp;lt;main+0&amp;gt;: push %ebp 0x08049834 &amp;lt;main+1&amp;gt;: mov %esp,%ebp 0x08049836 &amp;lt;main+3&amp;gt;: and $0xfffffff0,%esp 0x08049839 &amp;lt;main+6&amp;gt;: sub $0x20,%esp 0x0804983c &amp;lt;main+9&amp;gt;: movl $0x0,0x8(%esp) 0x08049844 &amp;lt;main+17&amp;gt;: movl $0x0,0x4(%esp) 0x0804984c &amp;lt;main+25&amp;gt;: movl $0x8049c74,(%esp) ; &amp;#34;final0&amp;#34; 0x08049853 &amp;lt;main+32&amp;gt;: call 0x8048e58 &amp;lt;background_process&amp;gt; 0x08049858 &amp;lt;main+37&amp;gt;: movl $0xbb3,(%esp) 0x0804985f &amp;lt;main+44&amp;gt;: call 0x80492f5 &amp;lt;serve_forever&amp;gt; 0x08049864 &amp;lt;main+49&amp;gt;: mov %eax,0x18(%esp) 0x08049868 &amp;lt;main+53&amp;gt;: mov 0x18(%esp),%eax 0x0804986c &amp;lt;main+57&amp;gt;: mov %eax,(%esp) 0x0804986f &amp;lt;main+60&amp;gt;: call 0x80493d5 &amp;lt;set_io&amp;gt; 0x08049874 &amp;lt;main+65&amp;gt;: call 0x804975a &amp;lt;get_username&amp;gt; 0x08049879 &amp;lt;main+70&amp;gt;: mov %eax,0x1c(%esp) 0x0804987d &amp;lt;main+74&amp;gt;: mov $0x8049c7b,%eax ; &amp;#34;No such user %s\n&amp;#34; 0x08049882 &amp;lt;main+79&amp;gt;: mov 0x1c(%esp),%edx 0x08049886 &amp;lt;main+83&amp;gt;: mov %edx,0x4(%esp) 0x0804988a &amp;lt;main+87&amp;gt;: mov %eax,(%esp) 0x0804988d &amp;lt;main+90&amp;gt;: call 0x8048bac &amp;lt;printf@plt&amp;gt; We have got a service waiting for our commands.</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Protostar - Heap levels</title>
      <link>http://camelinc.info/blog/2014/11/Exploit-Exercises---Protostar---Heap-levels/</link>
      <pubDate>Sat, 01 Nov 2014 11:52:17 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2014/11/Exploit-Exercises---Protostar---Heap-levels/</guid>
      <description>Prequisites  Protostar ISO  Heap 0 For this scenario we need to run the winner() function. To get a better idea about the binary a look at the assembly helps.
0x08048492 &amp;lt;main+6&amp;gt;: sub $0x20,%esp 0x08048495 &amp;lt;main+9&amp;gt;: movl $0x40,(%esp) 0x0804849c &amp;lt;main+16&amp;gt;: call 0x8048388 &amp;lt;malloc@plt&amp;gt; ; malloc(64) 0x080484a1 &amp;lt;main+21&amp;gt;: mov %eax,0x18(%esp) ; store address 0x080484a5 &amp;lt;main+25&amp;gt;: movl $0x4,(%esp) 0x080484ac &amp;lt;main+32&amp;gt;: call 0x8048388 &amp;lt;malloc@plt&amp;gt; ; malloc(4) 0x080484b1 &amp;lt;main+37&amp;gt;: mov %eax,0x1c(%esp) ; store address 0x080484b5 &amp;lt;main+41&amp;gt;: mov $0x8048478,%edx ; nowinner() 0x080484ba &amp;lt;main+46&amp;gt;: mov 0x1c(%esp),%eax 0x080484be &amp;lt;main+50&amp;gt;: mov %edx,(%eax) 0x080484c0 &amp;lt;main+52&amp;gt;: mov $0x80485f7,%eax ; &amp;#34;data is at %p, fp is at %p\n&amp;#34; 0x080484dd &amp;lt;main+81&amp;gt;: mov 0xc(%ebp),%eax .</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Protostar - Network levels</title>
      <link>http://camelinc.info/blog/2014/09/Exploit-Exercises---Protostar---Network-levels/</link>
      <pubDate>Thu, 18 Sep 2014 13:21:27 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2014/09/Exploit-Exercises---Protostar---Network-levels/</guid>
      <description>Prequisites  Protostar ISO  Net 0 For this exercise we have got a service listening on port 2999. Let&amp;rsquo;s connect and see what it does.
user@protostar:/opt/protostar/bin$ telnet 127.0.0.1 2999 Connected to 127.0.0.1. Please send &amp;#39;12992273&amp;#39; as a little endian 32bit int AAAA I&amp;#39;m sorry, you sent 1094795585 instead The challenge changes for every run. So we have to write a script that extracts the challenge. Subsequently, we have to calculate the correct response.</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Protostar - Format String levels</title>
      <link>http://camelinc.info/blog/2014/09/Exploit-Exercises---Protostar---Format-String-levels/</link>
      <pubDate>Tue, 16 Sep 2014 13:21:27 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2014/09/Exploit-Exercises---Protostar---Format-String-levels/</guid>
      <description>Prequisites  Protostar ISO  Format 0 First of all, we take a look at the disassembly.
... 0x08048431 &amp;lt;main+6&amp;gt;: sub $0x10,%esp 0x08048434 &amp;lt;main+9&amp;gt;: mov 0xc(%ebp),%eax ; load pointer to the address of first argument 0x08048437 &amp;lt;main+12&amp;gt;: add $0x4,%eax ; increment to get to the pointer of the second argument 0x0804843a &amp;lt;main+15&amp;gt;: mov (%eax),%eax ; resolve pointer-pointer 0x0804843c &amp;lt;main+17&amp;gt;: mov %eax,(%esp) ; store at adress of esp 0x0804843f &amp;lt;main+20&amp;gt;: call 0x80483f4 &amp;lt;vuln&amp;gt; .</description>
    </item>
    
    <item>
      <title>Exploit Exercises - Protostar - Stack levels</title>
      <link>http://camelinc.info/blog/2014/08/Exploit-Exercises---Protostar---Stack-levels/</link>
      <pubDate>Sun, 31 Aug 2014 16:07:14 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2014/08/Exploit-Exercises---Protostar---Stack-levels/</guid>
      <description>Prequisites  Protostar ISO  Stack 0 For this scenario we need to overwrite the stack variable $modified. To get a better idea about the binary a look at the assembly helps.
0x080483f4 &amp;lt;main+0&amp;gt;: push %ebp 0x080483f5 &amp;lt;main+1&amp;gt;: mov %esp,%ebp 0x080483f7 &amp;lt;main+3&amp;gt;: and $0xfffffff0,%esp 0x080483fa &amp;lt;main+6&amp;gt;: sub $0x60,%esp 0x080483fd &amp;lt;main+9&amp;gt;: movl $0x0,0x5c(%esp) 0x08048405 &amp;lt;main+17&amp;gt;: lea 0x1c(%esp),%eax ;load $buffer address into EAX 0x08048409 &amp;lt;main+21&amp;gt;: mov %eax,(%esp) ;set ESP 0x0804840c &amp;lt;main+24&amp;gt;: call 0x804830c &amp;lt;gets@plt&amp;gt; ;vulnerable funtion 0x08048411 &amp;lt;main+29&amp;gt;: mov 0x5c(%esp),%eax ;load $modified into EAX 0x08048415 &amp;lt;main+33&amp;gt;: test %eax,%eax ;Sets ZF 0x08048417 &amp;lt;main+35&amp;gt;: je 0x8048427 &amp;lt;main+51&amp;gt; ;$modified was not modified 0x08048419 &amp;lt;main+37&amp;gt;: movl $0x8048500,(%esp) 0x08048420 &amp;lt;main+44&amp;gt;: call 0x804832c &amp;lt;puts@plt&amp;gt; 0x08048425 &amp;lt;main+49&amp;gt;: jmp 0x8048433 &amp;lt;main+63&amp;gt; 0x08048427 &amp;lt;main+51&amp;gt;: movl $0x8048529,(%esp) ;target for main+35 0x0804842e &amp;lt;main+58&amp;gt;: call 0x804832c &amp;lt;puts@plt&amp;gt; 0x08048433 &amp;lt;main+63&amp;gt;: leave 0x08048434 &amp;lt;main+64&amp;gt;: ret  In order to overwrite the $modified variable the following command is sufficient to do the task.</description>
    </item>
    
    <item>
      <title>Offensive Security Certified Professional</title>
      <link>http://camelinc.info/blog/2014/05/Offensive-Security-Certified-Professional/</link>
      <pubDate>Wed, 28 May 2014 14:14:46 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2014/05/Offensive-Security-Certified-Professional/</guid>
      <description>Intro Try Harder! If received my OSCP exam in the mail today. Time to write a short review.
As I did not know what to expect from this certification I booked the 90 days lab access. Also, I wanted to finish all the exercises and compromise as many systems as possible. Up until I received the learning material and the VPN connection to the lab was established I only knew little what to expect.</description>
    </item>
    
    <item>
      <title>Aviosoft Digital TV Player Professional 1.0 Stack Buffer Overflow</title>
      <link>http://camelinc.info/blog/2014/05/Aviosoft-Digital-TV-Player-Professional-1.0-Stack-Buffer-Overflow/</link>
      <pubDate>Mon, 26 May 2014 13:05:09 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2014/05/Aviosoft-Digital-TV-Player-Professional-1.0-Stack-Buffer-Overflow/</guid>
      <description>Prequisites  Windows XP SP3 (en-us) Immunity Debugger AviosoftDTVPlayerPro  Triggering the overflow After some fuzzing the basic exploit can be create with the following python code.
1#!/usr/bin/python -w 2 3buffer = &amp;#34;A&amp;#34; * 2000 4 5f = open(&amp;#34;evil.plf&amp;#34;,&amp;#34;w&amp;#34;) 6f.write(buffer) 7f.close() Opening this file with the vulnerable application results in an access violation with the following register values.
  Great, the EIP is under our control.
Identifying EIP Offset In order to identify the correct offset of the overflow let&amp;rsquo;s create a pattern and start again.</description>
    </item>
    
    <item>
      <title>Easy RM to MP3 Converter</title>
      <link>http://camelinc.info/blog/2014/05/Easy-RM-to-MP3-Converter/</link>
      <pubDate>Sun, 25 May 2014 11:27:27 +0000</pubDate>
      
      <guid>http://camelinc.info/blog/2014/05/Easy-RM-to-MP3-Converter/</guid>
      <description>Prequisites  Windows XP SP3 (en-us) Immunity Debugger Easy RM to MP3 Converter  Identifying the Vulnerability First of all we need to identify the appropriate buffer size for the exploit. To do this, we simply execute the following python script.
1buffer = &amp;#34;A&amp;#34; * 30000 2 3filename=&amp;#34;evil.m3u&amp;#34; 4evilfile = open(filename , &amp;#39;w&amp;#39;) 5evilfile.write(buffer) 6evilfile.close() Identifying EIP Offset Subsequently, open up the resulting playlist in the converter. Boom, the application crashes.</description>
    </item>
    
  </channel>
</rss>